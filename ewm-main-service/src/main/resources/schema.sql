drop table if exists compilations_events;
drop index if exists idx_compilation_title;
drop table if exists compilations;
drop table if exists requests;
drop table if exists events;
drop index if exists idx_category_name;
drop table if exists categories;
drop index if exists idx_user_email;
drop table if exists users;

/* Пользователи */
create table if not exists users (
    user_id bigint generated by default as identity,
    user_email varchar(254) not null,
    user_name varchar(250) not null,
    constraint pk_user_id primary key (user_id),
    constraint uq_user_email unique (user_email)
);

create index if not exists idx_user_email on users (user_email);

/* Категории */
create table if not exists categories (
    category_id bigint generated by default as identity,
    category_name varchar(50) not null,
    constraint pk_category_id primary key (category_id),
    constraint uq_category_name unique (category_name)
);

create index if not exists idx_category_name on categories (category_name);

/* События */
create table if not exists events (
    event_id bigint generated by default as identity,
    user_id bigint,
    category_id bigint,
    event_title varchar(120) not null,
    event_annotation varchar(2000) not null,
    event_description varchar(7000) not null,
    event_datetime timestamp without time zone not null,
    event_is_paid boolean,
    event_is_request_moderation boolean,
    event_participant_limit integer,
    event_location_lat float,
    event_location_lon float,
    event_state varchar(50),
    event_create_dt timestamp without time zone,
    event_publication_dt timestamp without time zone,
    constraint pk_event_id primary key (event_id),
    constraint fk_event_category foreign key (category_id) references categories (category_id),
    constraint fk_event_user foreign key (user_id) references users (user_id)
);

/* Подборки */
create table if not exists compilations (
    compilation_id bigint generated by default as identity,
    compilation_title varchar(50) not null,
    compilation_is_pinned boolean,
    constraint pk_compilation_id primary key (compilation_id),
    constraint uq_compilation_title unique (compilation_title)
);

create index if not exists idx_compilation_title on compilations (compilation_title);

/* Наполнение подборки событиями */
create table if not exists compilations_events (
    compilation_id bigint,
    event_id bigint,
    constraint pk_compilations_events primary key (compilation_id, event_id),
    constraint fk_compilations_events_compilation foreign key (compilation_id) references compilations (compilation_id),
    constraint fk_compilations_events_event foreign key (event_id) references events (event_id)
);

/* Запросы на участие */
create table if not exists requests (
    request_id bigint generated by default as identity,
    event_id bigint not null,
    user_id bigint not null,
    request_create_dt timestamp without time zone not null,
    request_status varchar(10) not null,
    constraint pk_request_id primary key (request_id),
    constraint fk_request_event foreign key (event_id) references events (event_id),
    constraint fk_request_user foreign key (user_id) references users (user_id),
    constraint uq_request_user_id_event_id unique (user_id, event_id)
);

